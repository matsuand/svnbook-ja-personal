# Japanese translations for PACKAGE package
# Copyright (C) 2017 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-08-06 14:19+0900\n"
"PO-Revision-Date: 2017-08-06 14:19+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: matsuand個人翻訳\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Content of: <appendix><title>
#: appb-svn-for-cvs-users.xml:4
msgid "Subversion for CVS Users"
msgstr ""

#. type: Content of: <appendix><para>
#: appb-svn-for-cvs-users.xml:6
msgid ""
"This appendix is a guide for CVS users new to Subversion.  It's essentially "
"a list of differences between the two systems as <quote>viewed from 10,000 "
"feet.</quote> For each section, we provide references to relevant chapters "
"when possible."
msgstr ""

#. type: Content of: <appendix><para>
#: appb-svn-for-cvs-users.xml:12
msgid ""
"Although the goal of Subversion is to take over the current and future CVS "
"user base, some new features and design changes were required to fix certain "
"<quote>broken</quote> behaviors that CVS had.  This means that, as a CVS "
"user, you may need to break habits&mdash;ones that you forgot were odd to "
"begin with."
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:24
msgid "Revision Numbers Are Different Now"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:26
msgid ""
"In CVS, revision numbers are per file.  This is because CVS stores its data "
"in RCS files; each file has a corresponding RCS file in the repository, and "
"the repository is roughly laid out according to the structure of your "
"project tree."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:31
msgid ""
"In Subversion, the repository looks like a single filesystem.  Each commit "
"results in an entirely new filesystem tree; in essence, the repository is an "
"array of trees.  Each of these trees is labeled with a single revision "
"number.  When someone talks about <quote>revision 54</quote>, he's talking "
"about a particular tree (and indirectly, the way the filesystem looked after "
"the 54th commit)."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:39
msgid ""
"Technically, it's not valid to talk about <quote>revision 5 of <filename>foo."
"c</filename>.</quote> Instead, one would say <quote><filename>foo.c</"
"filename> as it appears in revision 5.</quote> Also, be careful when making "
"assumptions about the evolution of a file.  In CVS, revisions 5 and 6 of "
"<filename>foo.c</filename> are always different.  In Subversion, it's most "
"likely that <filename>foo.c</filename> did <emphasis>not</emphasis> change "
"between revisions 5 and 6."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:49
msgid ""
"Similarly, in CVS, a tag or branch is an annotation on the file or on the "
"version information for that individual file, whereas in Subversion, a tag "
"or branch is a copy of an entire tree (by convention, into the <filename>/"
"branches</filename> or <filename>/tags</filename> directories that appear at "
"the top level of the repository, beside <filename>/trunk</filename>).  In "
"the repository as a whole, many versions of each file may be visible: the "
"latest version on each branch, every tagged version, and of course the "
"latest version on the trunk itself.  So, to refine the terms even further, "
"one would often say <quote><filename>foo.c</filename> as it appears in "
"<filename>/branches/REL1</filename> in revision 5.</quote>"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:63
msgid ""
"For more details on this topic, see <xref linkend=\"svn.basic.in-action.revs"
"\" />."
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:72
msgid "Directory Versions"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:74
msgid ""
"Subversion tracks tree structures, not just file contents.  It's one of the "
"biggest reasons Subversion was written to replace CVS."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:78
msgid "Here's what this means to you, as a former CVS user:"
msgstr ""

#. type: Content of: <appendix><sect1><itemizedlist><listitem><para>
#: appb-svn-for-cvs-users.xml:82
msgid ""
"The <command>svn add</command> and <command>svn delete</command> commands "
"work on directories now, just as they work on files.  So do <command>svn "
"copy</command> and <command>svn move</command>.  However, these commands do "
"<emphasis>not</emphasis> cause any kind of immediate change in the "
"repository.  Instead, the working items are simply <quote>scheduled</quote> "
"for addition or deletion.  No repository changes happen until you run "
"<userinput>svn commit</userinput>."
msgstr ""

#. type: Content of: <appendix><sect1><itemizedlist><listitem><para>
#: appb-svn-for-cvs-users.xml:93
msgid ""
"Directories aren't dumb containers anymore; they have revision numbers like "
"files.  (Or more properly, it's correct to talk about <quote>directory "
"<filename>foo/</filename> in revision 5.</quote>)"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:100
msgid ""
"Let's talk more about that last point.  Directory versioning is a hard "
"problem; because we want to allow mixed-revision working copies, there are "
"some limitations on how far we can abuse this model."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:105
msgid ""
"From a theoretical point of view, we define <quote>revision 5 of directory "
"<filename>foo</filename></quote> to mean a specific collection of directory "
"entries and properties.  Now suppose we start adding and removing files from "
"<filename>foo</filename>, and then commit.  It would be a lie to say that we "
"still have revision 5 of <filename>foo</filename>.  However, if we bumped "
"<filename>foo</filename>'s revision number after the commit, that would be a "
"lie too; there may be other changes to <filename>foo</filename> we haven't "
"yet received, because we haven't updated yet."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:117
msgid ""
"Subversion deals with this problem by quietly tracking committed adds and "
"deletes in the <filename>.svn</filename> area.  When you eventually run "
"<userinput>svn update</userinput>, all accounts are settled with the "
"repository, and the directory's new revision number is set correctly.  "
"<emphasis>Therefore, only after an update is it truly safe to say that you "
"have a <quote>perfect</quote> revision of a directory.</emphasis> Most of "
"the time, your working copy will contain <quote>imperfect</quote> directory "
"revisions."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:127
msgid ""
"Similarly, a problem arises if you attempt to commit property changes on a "
"directory.  Normally, the commit would bump the working directory's local "
"revision number.  But again, that would be a lie, as there may be adds or "
"deletes that the directory doesn't yet have, because no update has "
"happened.  <emphasis>Therefore, you are not allowed to commit property "
"changes on a directory unless the directory is up to date.</emphasis>"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:136
msgid ""
"For more discussion about the limitations of directory versioning, see <xref "
"linkend=\"svn.basic.in-action.mixedrevs\"/>."
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:146
msgid "More Disconnected Operations"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:148
msgid ""
"In recent years, disk space has become outrageously cheap and abundant, but "
"network bandwidth has not.  Therefore, the Subversion working copy has been "
"optimized around the scarcer resource."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:153
msgid ""
"The <filename>.svn</filename> administrative directory serves the same "
"purpose as the <filename>CVS</filename> directory, except that it also "
"stores read-only, <quote>pristine</quote> copies of your files.  This allows "
"you to do many things offline:"
msgstr ""

#. type: Content of: <appendix><sect1><variablelist><varlistentry><term>
#: appb-svn-for-cvs-users.xml:162
msgid "<command>svn status</command>"
msgstr ""

#. type: Content of: <appendix><sect1><variablelist><varlistentry><listitem><para>
#: appb-svn-for-cvs-users.xml:164
msgid ""
"Shows you any local changes you've made (see <xref linkend=\"svn.tour.cycle."
"examine.status\"/>)"
msgstr ""

#. type: Content of: <appendix><sect1><variablelist><varlistentry><term>
#: appb-svn-for-cvs-users.xml:170
msgid "<command>svn diff</command>"
msgstr ""

#. type: Content of: <appendix><sect1><variablelist><varlistentry><listitem><para>
#: appb-svn-for-cvs-users.xml:172
msgid ""
"Shows you the details of your changes (see <xref linkend=\"svn.tour.cycle."
"examine.diff\"/>)"
msgstr ""

#. type: Content of: <appendix><sect1><variablelist><varlistentry><term>
#: appb-svn-for-cvs-users.xml:178
msgid "<command>svn revert</command>"
msgstr ""

#. type: Content of: <appendix><sect1><variablelist><varlistentry><listitem><para>
#: appb-svn-for-cvs-users.xml:180
msgid ""
"Removes your local changes (see <xref linkend=\"svn.tour.cycle.revert\"/>)"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:187
msgid ""
"Also, the cached pristine files allow the Subversion client to send "
"differences when committing, which CVS cannot do."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:190
msgid ""
"The last subcommand in the list&mdash;<command>svn revert</command>&mdash;is "
"new.  It will not only remove local changes, but also unschedule operations "
"such as adds and deletes.  Although deleting the file and then running "
"<userinput>svn update</userinput> will still work, doing so distorts the "
"true purpose of updating.  And, while we're on this subject&hellip;"
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:203
msgid "Distinction Between Status and Update"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:205
msgid ""
"Subversion attempts to erase a lot of the confusion between the <command>cvs "
"status</command> and <command>cvs update</command> commands."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:209
msgid ""
"The <command>cvs status</command> command has two purposes: first, to show "
"the user any local modifications in the working copy, and second, to show "
"the user which files are out of date.  Unfortunately, because of CVS's hard-"
"to-read status output, many CVS users don't take advantage of this command "
"at all.  Instead, they've developed a habit of running <userinput>cvs "
"update</userinput> or <userinput>cvs -n update</userinput> to quickly see "
"their changes.  If users forget to use the <option>-n</option> option, this "
"has the side effect of merging repository changes they may not be ready to "
"deal with."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:221
msgid ""
"Subversion removes this muddle by making the output of <command>svn status</"
"command> easy to read for both humans and parsers.  Also, <command>svn "
"update</command> prints only information about files that are updated, "
"<emphasis>not</emphasis> local modifications."
msgstr ""

#. type: Content of: <appendix><sect1><sect2><title>
#: appb-svn-for-cvs-users.xml:228
msgid "Status"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><para>
#: appb-svn-for-cvs-users.xml:230
msgid ""
"<command>svn status</command> prints all files that have local "
"modifications.  By default, the repository is not contacted.  While this "
"subcommand accepts a fair number of options, the following are the most "
"commonly used ones:"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><variablelist><varlistentry><term>
#: appb-svn-for-cvs-users.xml:237
msgid "<option>-u</option>"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><variablelist><varlistentry><listitem><para>
#: appb-svn-for-cvs-users.xml:239
msgid ""
"Contact the repository to determine, and then display, out-of-dateness "
"information."
msgstr ""

#. type: Content of: <appendix><sect1><sect2><variablelist><varlistentry><term>
#: appb-svn-for-cvs-users.xml:245
msgid "<option>-v</option>"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><variablelist><varlistentry><listitem><para>
#: appb-svn-for-cvs-users.xml:247
msgid "Show <emphasis>all</emphasis> entries under version control."
msgstr ""

#. type: Content of: <appendix><sect1><sect2><variablelist><varlistentry><term>
#: appb-svn-for-cvs-users.xml:253
msgid "<option>-N</option>"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><variablelist><varlistentry><listitem><para>
#: appb-svn-for-cvs-users.xml:255
msgid "Run nonrecursively (do not descend into subdirectories)."
msgstr ""

#. type: Content of: <appendix><sect1><sect2><para>
#: appb-svn-for-cvs-users.xml:261
msgid ""
"The <command>svn status</command> command has two output formats.  In the "
"default <quote>short</quote> format, local modifications look like this:"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><informalexample><screen>
#: appb-svn-for-cvs-users.xml:267
#, no-wrap
msgid ""
"$ svn status\n"
"M       foo.c\n"
"M       bar/baz.c\n"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><para>
#: appb-svn-for-cvs-users.xml:273
msgid ""
"If you specify the <option>--show-updates</option> (<option>-u</option>) "
"option, a longer output format is used:"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><informalexample><screen>
#: appb-svn-for-cvs-users.xml:279
#, no-wrap
msgid ""
"$ svn status -u\n"
"M             1047   foo.c\n"
"        *     1045   faces.html\n"
"        *            bloo.png\n"
"M             1050   bar/baz.c\n"
"Status against revision:   1066\n"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><para>
#: appb-svn-for-cvs-users.xml:288
msgid ""
"In this case, two new columns appear.  The second column contains an "
"asterisk if the file or directory is out of date.  The third column shows "
"the working copy's revision number of the item.  In the previous example, "
"the asterisk indicates that <filename>faces.html</filename> would be patched "
"if we updated, and that <filename>bloo.png</filename> is a newly added file "
"in the repository.  (The absence of any revision number next to "
"<filename>bloo.png</filename> means that it doesn't yet exist in the working "
"copy.)"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><para>
#: appb-svn-for-cvs-users.xml:298
msgid ""
"For a more detailed discussion of <command>svn status</command>, including "
"an explanation of the status codes shown in the previous example, see <xref "
"linkend=\"svn.tour.cycle.examine.status\" />."
msgstr ""

#. type: Content of: <appendix><sect1><sect2><title>
#: appb-svn-for-cvs-users.xml:306
msgid "Update"
msgstr ""

#. type: Content of: <appendix><sect1><sect2><para>
#: appb-svn-for-cvs-users.xml:308
msgid ""
"<command>svn update</command> updates your working copy, and prints only "
"information about files that it updates."
msgstr ""

#. type: Content of: <appendix><sect1><sect2><para>
#: appb-svn-for-cvs-users.xml:311
msgid ""
"Subversion has combined CVS's <literal>P</literal> and <literal>U</literal> "
"codes into just <literal>U</literal>.  When a merge or conflict occurs, "
"Subversion simply prints <literal>G</literal> or <literal>C</literal>, "
"rather than a whole sentence about it."
msgstr ""

#. type: Content of: <appendix><sect1><sect2><para>
#: appb-svn-for-cvs-users.xml:317
msgid ""
"For a more detailed discussion of <command>svn update</command>, see <xref "
"linkend=\"svn.tour.cycle.update\" />."
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:328
msgid "Branches and Tags"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:330
msgid ""
"Subversion doesn't distinguish between filesystem space and <quote>branch</"
"quote> space; branches and tags are ordinary directories within the "
"filesystem.  This is probably the single biggest mental hurdle that a CVS "
"user will need to cross.  Read all about it in <xref linkend=\"svn."
"branchmerge\"/>."
msgstr ""

#. type: Content of: <appendix><sect1><warning><para><footnote><para>
#: appb-svn-for-cvs-users.xml:347
msgid ""
"That is, providing you don't run out of disk space before your checkout "
"finishes."
msgstr ""

#. type: Content of: <appendix><sect1><warning><para>
#: appb-svn-for-cvs-users.xml:338
msgid ""
"Since Subversion treats branches and tags as ordinary directories, your "
"project's various lines of development probably live in subdirectories of "
"the main project directory.  So remember to check out using the URL of the "
"subdirectory that contains the particular line of development you want, not "
"the project's root URL.  If you make the mistake of checking out the root of "
"the project, you may very well wind up with a working copy that contains a "
"complete copy of your project's content for each and every one of its "
"branches and tags.  <placeholder type=\"footnote\" id=\"0\"/>"
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:358
msgid "Metadata Properties"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:360
msgid ""
"A new feature of Subversion is that you can attach arbitrary metadata (or "
"<quote>properties</quote>) to files and directories.  Properties are "
"arbitrary name/value pairs associated with files and directories in your "
"working copy."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:366
msgid ""
"To set or get a property name, use the <command>svn propset</command> and "
"<command>svn propget</command> subcommands.  To list all properties on an "
"object, use <command>svn proplist</command>."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:371
msgid "For more information, see <xref linkend=\"svn.advanced.props\"/>."
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:379
msgid "Conflict Resolution"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:381
msgid ""
"CVS marks conflicts with inline <quote>conflict markers,</quote> and then "
"prints a <literal>C</literal> during an update or merge operation.  "
"Historically, this has caused problems, because CVS isn't doing enough.  "
"Many users forget about (or don't see) the <literal>C</literal> after it "
"whizzes by on their terminal.  They often forget that the conflict markers "
"are even present, and then accidentally commit files containing those "
"conflict markers."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:390
msgid ""
"Subversion solves this problem in a pair of ways.  First, when a conflict "
"occurs in a file, Subversion records the fact that the file is in a state of "
"conflict, and won't allow you to commit changes to that file until you "
"explicitly resolve the conflict.  Second, Subversion provides interactive "
"conflict resolution, which allows you to resolve conflicts as they happen "
"instead of having to go back and do so after the update or merge operation "
"completes.  See <xref linkend=\"svn.tour.cycle.resolve\" /> for more about "
"conflict resolution in Subversion."
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:406
msgid "Binary Files and Translation"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:408
msgid ""
"In the most general sense, Subversion handles binary files more gracefully "
"than CVS does.  Because CVS uses RCS, it can only store successive full "
"copies of a changing binary file.  Subversion, however, expresses "
"differences between files using a binary differencing algorithm, regardless "
"of whether they contain textual or binary data.  That means all files are "
"stored differentially (compressed) in the repository."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:416
msgid ""
"CVS users have to mark binary files with <option>-kb</option> flags to "
"prevent data from being garbled (due to keyword expansion and line-ending "
"translations).  They sometimes forget to do this."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:421
msgid ""
"Subversion takes the more paranoid route.  First, it never performs any kind "
"of keyword or line-ending translation unless you explicitly ask it to do so "
"(see <xref linkend=\"svn.advanced.props.special.keywords\"/> and <xref "
"linkend=\"svn.advanced.props.special.eol-style\"/> for more details).  By "
"default, Subversion treats all file data as literal byte strings, and files "
"are always stored in the repository in an untranslated state."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:430
msgid ""
"Second, Subversion maintains an internal notion of whether a file is "
"<quote>text</quote> or <quote>binary</quote> data, but this notion is "
"<emphasis>only</emphasis> extant in the working copy.  During an "
"<command>svn update</command>, Subversion will perform contextual merges on "
"locally modified text files, but will not attempt to do so for binary files."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:437
msgid ""
"To determine whether a contextual merge is possible, Subversion examines the "
"<literal>svn:mime-type</literal> property.  If the file has no <literal>svn:"
"mime-type</literal> property, or has a MIME type that is textual (e.g., "
"<literal>text/*</literal>), Subversion assumes it is text.  Otherwise, "
"Subversion assumes the file is binary.  Subversion also helps users by "
"running a binary-detection algorithm in the <command>svn import</command> "
"and <command>svn add</command> commands.  These commands will make a good "
"guess and then (possibly) set a binary <literal>svn:mime-type</literal> "
"property on the file being added.  (If Subversion guesses wrong, the user "
"can always remove or hand-edit the property.)"
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:458
msgid "Versioned Modules"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:460
msgid ""
"Unlike CVS, a Subversion working copy is aware that it has checked out a "
"module.  That means if somebody changes the definition of a module (e.g., "
"adds or removes components), a call to <command>svn update</command> will "
"update the working copy appropriately, adding and removing components."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:466
msgid ""
"Subversion defines modules as a list of directories within a directory "
"property; see <xref linkend=\"svn.advanced.externals\"/>."
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:476
msgid "Authentication"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:478
msgid ""
"With CVS's pserver, you are required to log in to the server (using the "
"<command>cvs login</command> command) before performing any read or write "
"operation&mdash;you sometimes even have to log in for anonymous operations.  "
"With a Subversion repository using Apache <command>httpd</command> or "
"<command>svnserve</command> as the server, you don't provide any "
"authentication credentials at the outset&mdash;if an operation that you "
"perform requires authentication, the server will challenge you for your "
"credentials (whether those credentials are username and password, a client "
"certificate, or even both).  So if your repository is world-readable, you "
"will not be required to authenticate at all for read operations."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:491
msgid ""
"As with CVS, Subversion still caches your credentials on disk (in your "
"<filename>~/.subversion/auth/</filename> directory) unless you tell it not "
"to by using the <option>--no-auth-cache</option> option."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:496
msgid ""
"The exception to this behavior, however, is in the case of accessing an "
"<command>svnserve</command> server over an SSH tunnel, using the <literal>svn"
"+ssh://</literal> URL scheme.  In that case, the <command>ssh</command> "
"program unconditionally demands authentication just to start the tunnel."
msgstr ""

#. type: Content of: <appendix><sect1><title>
#: appb-svn-for-cvs-users.xml:509
msgid "Converting a Repository from CVS to Subversion"
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:511
msgid ""
"Perhaps the most important way to familiarize CVS users with Subversion is "
"to let them continue to work on their projects using the new system.  And "
"while that can be somewhat accomplished using a flat import into a "
"Subversion repository of an exported CVS repository, the more thorough "
"solution involves transferring not just the latest snapshot of their data, "
"but all the history behind it as well, from one system to another.  This is "
"an extremely difficult problem to solve; it involves deducing changesets in "
"the absence of atomicity and translating between the systems' completely "
"orthogonal branching policies, among other complications.  Still, a handful "
"of tools claim to at least partially support the ability to convert existing "
"CVS repositories into Subversion ones."
msgstr ""

#. type: Content of: <appendix><sect1><para>
#: appb-svn-for-cvs-users.xml:525
msgid ""
"The most popular (and mature) conversion tool is cvs2svn (<ulink url="
"\"http://cvs2svn.tigris.org/\"/>), a Python program originally created by "
"members of Subversion's own development community.  This tool is meant to "
"run exactly once: it scans your CVS repository multiple times and attempts "
"to deduce commits, branches, and tags as best it can.  When it finishes, the "
"result is either a Subversion repository or a portable Subversion dump file "
"representing your code's history.  See the web site for detailed "
"instructions and caveats."
msgstr ""
